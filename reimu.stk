# Show welcome message #
(Reimu: virtual machine - Built on Stack technology\n(c) 2024 梶塚太智. All rights reserved\n) (title) var
cls title println

# It make user input memory's data #
[(Input memory's data: ) input eval] (memory) var
[] (stack) var 0 (pc) var () (output) var true (flag) var

(Starting up...\n) println
2 sleep

(
    # Show title message #
    cls title println
    
    # Show state #
    (Data stack     : ) stack concat println
    (Working memory : ) memory concat println

    # Preparing #
    (Program counter: ) pc concat println
    memory pc get (number) cast (cmd) var
    (Fetched value  : ) cmd concat println
    false (is-executed) var (Next execution : ) print

    # Commands around the number calculation #

    (   
        stack reverse 0 get (num1) var 
        stack reverse 0 del reverse (stack) var

        stack reverse 0 get (num2) var 
        stack reverse 0 del reverse (stack) var

        stack num1 num2 add append (stack) var 

        true (is-executed) var
        (Addition the number) println
    ) () 
    cmd 9001 equal is-executed not and if
    # Add the numbers #

    (
        stack reverse 0 get (num2) var 
        stack reverse 0 del reverse (stack) var

        stack reverse 0 get (num1) var 
        stack reverse 0 del reverse (stack) var

        stack num1 num2 sub append (stack) var 

        true (is-executed) var
        (Subtraction the number) println
    ) () 
    cmd 9002 equal is-executed not and if
    # Sub the numbers #

    (
        stack reverse 0 get (num2) var 
        stack reverse 0 del reverse (stack) var

        stack reverse 0 get (num1) var 
        stack reverse 0 del reverse (stack) var

        stack num1 num2 mul append (stack) var 

        true (is-executed) var
        (Multiplication the number) println
    ) () 
    cmd 9003 equal is-executed not and if
    # Mul the numbers #

    (
        stack reverse 0 get (num2) var 
        stack reverse 0 del reverse (stack) var

        stack reverse 0 get (num1) var 
        stack reverse 0 del reverse (stack) var

        stack num1 num2 div append (stack) var 

        true (is-executed) var
        (Division the number) println
    ) () 
    cmd 9004 equal is-executed not and if
    # Div the numbers #

    (
        stack reverse 0 get (num2) var 
        stack reverse 0 del reverse (stack) var

        stack reverse 0 get (num1) var 
        stack reverse 0 del reverse (stack) var

        stack num1 num2 mod append (stack) var 

        true (is-executed) var
        (Modulo the number) println
    ) () 
    cmd 9005 equal is-executed not and if
    # Mod the numbers #

    (
        stack reverse 0 get (num2) var 
        stack reverse 0 del reverse (stack) var

        stack reverse 0 get (num1) var 
        stack reverse 0 del reverse (stack) var

        stack num1 num2 pow append (stack) var 

        true (is-executed) var
        (Power the number) println
    ) () 
    cmd 9006 equal is-executed not and if
    # Pow the numbers #

    # Commands of logical calculation #

    (
        stack reverse 0 get (num1) var 
        stack reverse 0 del reverse (stack) var

        stack reverse 0 get (num2) var 
        stack reverse 0 del reverse (stack) var

        stack num1 num2 equal (number) cast append (stack) var 

        true (is-executed) var
        (Compare is it equal the number) println
    ) () 
    cmd 9101 equal is-executed not and if
    # Is it equal the value #

    (
        stack reverse 0 get (num1) var 
        stack reverse 0 del reverse (stack) var

        stack reverse 0 get (num2) var 
        stack reverse 0 del reverse (stack) var

        stack num1 num2 less (number) cast append (stack) var 

        true (is-executed) var
        (Compare is it lessthan the number) println
    ) () 
    cmd 9102 equal is-executed not and if
    # Is it lessthan the value #

    (
        stack reverse 0 get (num1) var 
        stack reverse 0 del reverse (stack) var

        stack num1 not (number) cast append (stack) var 

        true (is-executed) var
        (Logical not the number) println
    ) () 
    cmd 9103 equal is-executed not and if
    # Not the value #

    # Commands around the memory #

    (
        stack reverse 0 get (addr) var 
        stack reverse 0 del reverse (stack) var

        stack memory addr get (number) cast append (stack) var 

        true (is-executed) var
        (Read memory's value) println
    ) () 
    cmd 9201 equal is-executed not and if
    # Get memory value at address #

    (
        stack reverse 0 get (value) var 
        stack reverse 0 del reverse (stack) var

        stack reverse 0 get (addr) var 
        stack reverse 0 del reverse (stack) var

        memory addr value set (memory) var

        true (is-executed) var
        (Write value in memory) println
    ) () 
    cmd 9202 equal is-executed not and if
    # Write value on memory at address #

    (
        stack reverse 0 get (num1) var 
        stack reverse 0 del reverse (stack) var

        stack reverse 0 get (num2) var 
        stack reverse 0 del reverse (stack) var

        stack num1 append (stack) var
        stack num2 append (stack) var 

        true (is-executed) var
        (Swap top 2 value on stack) println
    ) () 
    cmd 9203 equal is-executed not and if
    # Swap top 2 of the stack #

    ( 
        stack reverse 0 del reverse (stack) var
        
        true (is-executed) var
        (Pop stack's top value) println
    ) () 
    cmd 9204 equal is-executed not and if
    # Pop the stack's top value #

    # Commands of Control #

    (
        stack reverse 0 get (num1) var 
        stack reverse 0 del reverse (stack) var

        num1 1 sub (pc) var

        true (is-executed) var
        (Set value of program counter) println
    ) () 
    cmd 9301 equal is-executed not and if
    # Set value of program counter #

    (
        stack reverse 0 get (addr) var 
        stack reverse 0 del reverse (stack) var

        stack reverse 0 get (cond) var 
        stack reverse 0 del reverse (stack) var

        (
            addr 1 sub (pc) var
        ) () cond 0 equal not if

        true (is-executed) var
        (Jump if condtion is true) println
    ) () 
    cmd 9302 equal is-executed not and if
    # Jump if match the condition #

    (
        true (is-executed) var
        (Non processing) println
    ) ()
    cmd 9303 equal is-executed not and if
    # Non processing #

    # Commands of system layer I/O #

    (
        (Shutting down...) println
        false (flag) var

        true (is-executed) var
    ) () 
    cmd 9401 equal is-executed not and if
    # Shotdown processing #


    (
        stack reverse 0 get (str) var 
        stack reverse 0 del reverse (stack) var

        output str concat (output) var 

        (Output value as UTF-8 charcher) println

        true (is-executed) var
    ) () 
    cmd 9402 equal is-executed not and if
    # Output string #

    (
        stack cmd append (stack) var
        true (is-executed) var
        cmd ( is pushed on the stack) concat println
    ) () 
    is-executed not if
    # Push value on the stack #

    (Standard output: ) output concat println

    # Count up program counter #
    pc 1 add (pc) var 
    0.5 sleep  
) (flag) while
